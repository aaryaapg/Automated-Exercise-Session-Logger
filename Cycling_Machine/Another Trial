#include <FirebaseESP8266.h>
#include <FirebaseESP8266HTTPClient.h>
#include <FirebaseFS.h>
#include <FirebaseJson.h>
#include <ESP8266WiFi.h> 
#include <deprecated.h>
#include <MFRC522.h>
#include <MFRC522Extended.h>
#include <require_cpp11.h>
#include <SoftwareSerial.h>
#include <SPI.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <Wire.h>
#include<math.h>

//INITIALIZATION
#define NTP_OFFSET   60 * 60      // In seconds
#define NTP_INTERVAL 60 * 1000    // In miliseconds
#define NTP_ADDRESS  "in.pool.ntp.org"
#define SS_PIN D4  //D2
#define RST_PIN D3 //D1
#define FIREBASE_HOST "dummy-database-bc278-default-rtdb.firebaseio.com"  
#define FIREBASE_AUTH "v1Ba9MecL92dlmHKcw5LHcutNlhGHhDVI09Y3Ibr"  
#define WIFI_SSID "Padhyegurjar"
#define WIFI_PASSWORD "mncb8tbbt8"
#define Upper_Threshold 0.85 

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, NTP_ADDRESS, NTP_OFFSET, NTP_INTERVAL);
MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.
FirebaseData firebaseData;
FirebaseJson json;

void startSession(void);
void readSensors(void);

int statuss = 0;
int out = 0;
String login_time="";
String rfidcode="";
String logout_time="";
String path="/";
//unsigned long int sensorToggleCounter = 0;   // counter for the number of button presses
//int sensorState = 0;         // current state of the button
//int lastSensorState = 0;     // previous state of the button

// MPU6050 Slave Device Address
const uint8_t MPU6050SlaveAddress = 0x68;

// Select SDA and SCL pins for I2C communication 
const uint8_t scl = D1;
const uint8_t sda = D2;

// sensitivity scale factor respective to full scale setting provided in datasheet 
const uint16_t AccelScaleFactor = 16384;
const uint16_t GyroScaleFactor = 131;

// MPU6050 few configuration register addresses
const uint8_t MPU6050_REGISTER_SMPLRT_DIV   =  0x19;
const uint8_t MPU6050_REGISTER_USER_CTRL    =  0x6A;
const uint8_t MPU6050_REGISTER_PWR_MGMT_1   =  0x6B;
const uint8_t MPU6050_REGISTER_PWR_MGMT_2   =  0x6C;
const uint8_t MPU6050_REGISTER_CONFIG       =  0x1A;
const uint8_t MPU6050_REGISTER_GYRO_CONFIG  =  0x1B;
const uint8_t MPU6050_REGISTER_ACCEL_CONFIG =  0x1C;
const uint8_t MPU6050_REGISTER_FIFO_EN      =  0x23;
const uint8_t MPU6050_REGISTER_INT_ENABLE   =  0x38;
const uint8_t MPU6050_REGISTER_ACCEL_XOUT_H =  0x3B;
const uint8_t MPU6050_REGISTER_SIGNAL_PATH_RESET  = 0x68;

//Accelerometer and Gyroscope Variabels
int16_t AX_raw, AY_raw,AZ_raw, GX_raw, GY_raw, GZ_raw, Temp_raw;
double Ax, Ay, Az, T, Gx, Gy, Gz;

//Counter Variables
int state; //State Variable
int c_state = 0; //current state
int p_state = 0; //previous state
int count = 0; //counting all edges
int realcount; //Count for just low to high edges
void setup() {
  Serial.begin(9600);
  //Connecting to WiFi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);  
  Serial.print("connecting");  
  while (WiFi.status() != WL_CONNECTED) {  
    Serial.print(".");   
    delay(500);  
  }  
  Serial.println();  
  Serial.print("Connected: ");  
  Serial.println(WiFi.localIP());  

  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  Firebase.reconnectWiFi(true);
  SPI.begin();      // Initiate  SPI bus
  mfrc522.PCD_Init();   // Initiate MFRC522
  timeClient.begin();
  Wire.begin(sda, scl);
  MPU6050_Init();
}

void loop() {
   timeClient.update();
   startSession();
   if(statuss==1){
   readSensors();}
   else {return;}
   timeClient.update();
}

void startSession(){
  Serial.print(".");
 login_time="";
 rfidcode="";
logout_time="";
  //sensorToggleCounter = 0;
  
   if ( ! mfrc522.PICC_IsNewCardPresent()) 
  {
    
    return;
  }
  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial()) 
  {
    Serial.println("No cards available");
    return;}
  Serial.println();
  Serial.print(" UID tag :");
  String content= "";
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++) 
  {
     Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(mfrc522.uid.uidByte[i], HEX);
     content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  content.toUpperCase();
  rfidcode=String(content.substring(1));
  path.concat("members/");
  path.concat(rfidcode);
  path.concat("/");
  path.concat("Activity");
  //path="/"+"members"+"/"+rfidcode+"/"+"Activity";
timeClient.update();
login_time=timeClient.getFormattedTime();
Firebase.setString(firebaseData, path + "/cycle/Login", login_time);
Firebase.setInt(firebaseData, path + "/cycle/Count", 0);
Firebase.setString(firebaseData, path + "/cycle/Logout", "0");
Firebase.setBool(firebaseData, path + "/cycle/Ongoing_Session", true);
  delay(500);  
    mfrc522.PCD_AntennaOff();
    Serial.println(" Antenna Off ");
    statuss=1;
  }

void readSensors() {
  Read_RawValue(MPU6050SlaveAddress, MPU6050_REGISTER_ACCEL_XOUT_H);
  //Calculations: divide each with their sensitivity scale factor
  Ax = (double)AX_raw/AccelScaleFactor;
  Ay = (double)AY_raw/AccelScaleFactor;
  Az = (double)AZ_raw/AccelScaleFactor;
  T = (double)Temp_raw/340+36.53; //temperature formula
  Gx = (double)GX_raw/GyroScaleFactor;
  Gy = (double)GY_raw/GyroScaleFactor;
  Gz = (double)GZ_raw/GyroScaleFactor;

  //Comparator
  if(Az > Upper_Threshold) {
    state = 1;
  }
  else {
    state = 0;
  }
  c_state = state;
  // compare the current state to its previous state
  if (c_state != p_state) {
      // if the state has changed, increment the counter
      count++;
      // Delay a little bit to avoid bouncing
  }
  else{
    count = count;
  }
  // save the current state as the last state, for next time through the loop
  p_state = c_state;
  realcount = count / 2;
  Serial.print(" State: "); Serial.print(state);
  Serial.print(" Count: "); Serial.println(realcount);
  delay(500);
}
void I2C_Write(uint8_t deviceAddress, uint8_t regAddress, uint8_t data){
  Wire.beginTransmission(deviceAddress);
  Wire.write(regAddress);
  Wire.write(data);
  Wire.endTransmission();
}

// read all 14 register
void Read_RawValue(uint8_t deviceAddress, uint8_t regAddress){
  Wire.beginTransmission(deviceAddress);
  Wire.write(regAddress);
  Wire.endTransmission();
  Wire.requestFrom(deviceAddress, (uint8_t)14);
  AX_raw = (((int16_t)Wire.read()<<8) | Wire.read());
  AY_raw = (((int16_t)Wire.read()<<8) | Wire.read());
  AZ_raw = (((int16_t)Wire.read()<<8) | Wire.read());
  Temp_raw = (((int16_t)Wire.read()<<8) | Wire.read());
  GX_raw = (((int16_t)Wire.read()<<8) | Wire.read());
  GY_raw = (((int16_t)Wire.read()<<8) | Wire.read());
  GZ_raw = (((int16_t)Wire.read()<<8) | Wire.read());
}

//configure MPU6050
void MPU6050_Init(){
  delay(150);
  I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_SMPLRT_DIV, 0x07);
  I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_PWR_MGMT_1, 0x01);
  I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_PWR_MGMT_2, 0x00);
  I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_CONFIG, 0x00);
  I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_GYRO_CONFIG, 0x00);//set +/-250 degree/second full scale
  I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_ACCEL_CONFIG, 0x00);// set +/- 2g full scale
  I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_FIFO_EN, 0x00);
  I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_INT_ENABLE, 0x01);
  I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_SIGNAL_PATH_RESET, 0x00);
  I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_USER_CTRL, 0x00);
}

//Occupancy
/*
http://imakestudio.org/2020/05/08/esp8266-rfid/
https://miliohm.com/rc522-rfid-reader-with-nodemcu/
https://create.arduino.cc/projecthub/pibots555/iot-using-firebase-and-nodemcu-48a1fd
*/
